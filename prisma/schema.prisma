// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  walletAddress String    @unique // Assuming Solana wallet address will be the primary identifier for login
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  eventsOwned   Event[]   @relation("EventOwner") // Events created by this user
  registrations Registration[]
  attendedEvents Attendance[]

  @@map("users")
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  date          DateTime
  location      String?
  imageUrl      String?   // Could be stored on Lighthouse
  nftName       String    // Name of the POAP NFT
  nftSymbol     String    // Symbol for the POAP NFT
  nftImageUrl   String?   // Image for the NFT, stored on Lighthouse
  nftCollection String?   // Metaplex Collection address if grouping NFTs
  creatorId     String
  creator       User      @relation("EventOwner", fields: [creatorId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  onChainTxSignature String?
  registrations Registration[]
  attendees     Attendance[]

  @@map("events")
}

model Registration {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  registeredAt DateTime @default(now())
  onChainTxSignature String? // Transaction signature proving on-chain registration
  verifiedOnChain Boolean @default(false) // Whether the transaction was verified
  metadata String? // JSON string for additional registration metadata

  @@unique([userId, eventId]) // A user can register for an event only once
  @@map("registrations")
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  confirmedAt DateTime @default(now())
  nftMintAddress String? // Solana address of the minted POAP NFT
  nftTransactionSignature String? // Transaction signature for the mint

  @@unique([userId, eventId]) // A user's attendance for an event is unique
  @@map("attendances")
}
